//
//  GLIFPointPenTests.swift
//  UFOKitTests
//
//  Created by David Schweinsberg on 10/17/18.
//  Copyright Â© 2018 David Schweinsberg. All rights reserved.
//

import XCTest
import UFOKit

class GLIFPointPenTests: XCTestCase {

  override func setUp() {
    super.setUp()
  }

  override func tearDown() {
  }

  func testPathCreation() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.endPath()
    }())
    XCTAssertEqual(outlineElement.childCount, 1)
    XCTAssertEqual(outlineElement.child(at: 0)?.name, "contour")
  }

  func testAddPoints() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addPoint(CGPoint(x: 0, y: 0), segmentType: .line)
      try pen.addPoint(CGPoint(x: 100, y: 0), segmentType: .line)
      try pen.addPoint(CGPoint(x: 100.5, y: 100.5), segmentType: .line)
      try pen.addPoint(CGPoint(x: 0, y: 100), segmentType: .line)
      try pen.endPath()
    }())

    let contourElement = outlineElement.child(at: 0) as? XMLElement
    XCTAssertEqual(contourElement?.childCount, 4)

    let pointElement0 = contourElement?.child(at: 0) as? XMLElement
    XCTAssertEqual(pointElement0?.attributes?.count, 3)
    XCTAssertEqual(pointElement0?.attribute(forName: "x")?.stringValue, "0")
    XCTAssertEqual(pointElement0?.attribute(forName: "y")?.stringValue, "0")
    XCTAssertEqual(pointElement0?.attribute(forName: "type")?.stringValue, "line")

    let pointElement1 = contourElement?.child(at: 1) as? XMLElement
    XCTAssertEqual(pointElement1?.attributes?.count, 3)
    XCTAssertEqual(pointElement1?.attribute(forName: "x")?.stringValue, "100")
    XCTAssertEqual(pointElement1?.attribute(forName: "y")?.stringValue, "0")
    XCTAssertEqual(pointElement1?.attribute(forName: "type")?.stringValue, "line")

    let pointElement2 = contourElement?.child(at: 2) as? XMLElement
    XCTAssertEqual(pointElement2?.attributes?.count, 3)
    XCTAssertEqual(pointElement2?.attribute(forName: "x")?.stringValue, "100.5")
    XCTAssertEqual(pointElement2?.attribute(forName: "y")?.stringValue, "100.5")
    XCTAssertEqual(pointElement2?.attribute(forName: "type")?.stringValue, "line")

    let pointElement3 = contourElement?.child(at: 3) as? XMLElement
    XCTAssertEqual(pointElement3?.attributes?.count, 3)
    XCTAssertEqual(pointElement3?.attribute(forName: "x")?.stringValue, "0")
    XCTAssertEqual(pointElement3?.attribute(forName: "y")?.stringValue, "100")
    XCTAssertEqual(pointElement3?.attribute(forName: "type")?.stringValue, "line")
  }

  func testAddCurvePoints() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addPoint(CGPoint(x: 0, y: 0), segmentType: .move)
      try pen.addPoint(CGPoint(x: 50, y: 0))
      try pen.addPoint(CGPoint(x: 100, y: 50))
      try pen.addPoint(CGPoint(x: 100, y: 100), segmentType: .curve)
      try pen.endPath()
    }())

    let contourElement = outlineElement.child(at: 0) as? XMLElement
    XCTAssertEqual(contourElement?.childCount, 4)

    let pointElement0 = contourElement?.child(at: 0) as? XMLElement
    XCTAssertEqual(pointElement0?.attributes?.count, 3)
    XCTAssertEqual(pointElement0?.attribute(forName: "x")?.stringValue, "0")
    XCTAssertEqual(pointElement0?.attribute(forName: "y")?.stringValue, "0")
    XCTAssertEqual(pointElement0?.attribute(forName: "type")?.stringValue, "move")

    let pointElement1 = contourElement?.child(at: 1) as? XMLElement
    XCTAssertEqual(pointElement1?.attributes?.count, 2)
    XCTAssertEqual(pointElement1?.attribute(forName: "x")?.stringValue, "50")
    XCTAssertEqual(pointElement1?.attribute(forName: "y")?.stringValue, "0")

    let pointElement2 = contourElement?.child(at: 2) as? XMLElement
    XCTAssertEqual(pointElement2?.attributes?.count, 2)
    XCTAssertEqual(pointElement2?.attribute(forName: "x")?.stringValue, "100")
    XCTAssertEqual(pointElement2?.attribute(forName: "y")?.stringValue, "50")

    let pointElement3 = contourElement?.child(at: 3) as? XMLElement
    XCTAssertEqual(pointElement3?.attributes?.count, 3)
    XCTAssertEqual(pointElement3?.attribute(forName: "x")?.stringValue, "100")
    XCTAssertEqual(pointElement3?.attribute(forName: "y")?.stringValue, "100")
    XCTAssertEqual(pointElement3?.attribute(forName: "type")?.stringValue, "curve")
  }

  func testSmoothPoints() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addPoint(CGPoint(x: 50, y: 0))
      try pen.addPoint(CGPoint(x: 100, y: 50))
      try pen.endPath()
    }())
  }

  func testBeginContourTwiceError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try pen.beginPath())
    XCTAssertThrowsError(try pen.beginPath())
  }

  func testEndContourPrematurelyError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertThrowsError(try pen.endPath())
  }

  func testEndOpenContourOffCurveError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addPoint(CGPoint(x: 50, y: 0), segmentType: .move)
      try pen.addPoint(CGPoint(x: 50, y: 50), segmentType: .curve)
      try pen.addPoint(CGPoint(x: 100, y: 100))
    }())
    XCTAssertThrowsError(try pen.endPath())
  }

  func testMoveNotFirstError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addPoint(CGPoint(x: 100, y: 100))
      try pen.addPoint(CGPoint(x: 50, y: 50), segmentType: .curve)
      }())
    XCTAssertThrowsError(try pen.addPoint(CGPoint(x: 0, y: 0), segmentType: .move))
  }

  func testOffCurveNotFollowedByCurveError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addPoint(CGPoint(x: 100, y: 100))
      }())
    XCTAssertThrowsError(try pen.addPoint(CGPoint(x: 0, y: 0), segmentType: .line))
  }

  func testTooManyOffCurvesError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addPoint(CGPoint(x: 100, y: 100))
      try pen.addPoint(CGPoint(x: 150, y: 100))
      try pen.addPoint(CGPoint(x: 100, y: 150))
      }())
    XCTAssertThrowsError(try pen.addPoint(CGPoint(x: 200, y: 200), segmentType: .curve))
  }

  func testSmoothOffCurveError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try pen.beginPath())
    XCTAssertThrowsError(try pen.addPoint(CGPoint(x: 200, y: 200), smooth: true))
  }

  func testPathNotBegunError() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertThrowsError(try pen.addPoint(CGPoint(x: 200, y: 200)))
  }

  func testSimpleComponent() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addComponent(baseGlyphName: "a", transformation: CGAffineTransform.identity)
      try pen.endPath()
    }())

    let contourElement = outlineElement.child(at: 0) as? XMLElement
    XCTAssertEqual(contourElement?.childCount, 1)

    let componentElement0 = contourElement?.child(at: 0) as? XMLElement
    XCTAssertEqual(componentElement0?.attributes?.count, 1)
    XCTAssertEqual(componentElement0?.attribute(forName: "base")?.stringValue, "a")
  }

  func testTranslatedComponent() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addComponent(baseGlyphName: "a", transformation: CGAffineTransform.identity.translatedBy(x: 10, y: 20))
      try pen.endPath()
    }())

    let contourElement = outlineElement.child(at: 0) as? XMLElement
    XCTAssertEqual(contourElement?.childCount, 1)

    let componentElement0 = contourElement?.child(at: 0) as? XMLElement
    XCTAssertEqual(componentElement0?.attributes?.count, 3)
    XCTAssertEqual(componentElement0?.attribute(forName: "base")?.stringValue, "a")
    XCTAssertEqual(componentElement0?.attribute(forName: "xOffset")?.stringValue, "10")
    XCTAssertEqual(componentElement0?.attribute(forName: "yOffset")?.stringValue, "20")
  }

  func testScaledAndTranslatedComponent() {
    let outlineElement = XMLElement(name: "outline")
    let pen = GLIFPointPen(outlineElement: outlineElement)
    XCTAssertNoThrow(try {
      try pen.beginPath()
      try pen.addComponent(baseGlyphName: "a",
                           transformation: CGAffineTransform(a: 2.0, b: 0.0, c: 0.0, d: 1.5, tx: 100, ty: 200))
      try pen.endPath()
      }())

    let contourElement = outlineElement.child(at: 0) as? XMLElement
    XCTAssertEqual(contourElement?.childCount, 1)

    let componentElement0 = contourElement?.child(at: 0) as? XMLElement
    XCTAssertEqual(componentElement0?.attributes?.count, 5)
    XCTAssertEqual(componentElement0?.attribute(forName: "base")?.stringValue, "a")
    XCTAssertEqual(componentElement0?.attribute(forName: "xScale")?.stringValue, "2")
    XCTAssertEqual(componentElement0?.attribute(forName: "yScale")?.stringValue, "1.5")
    XCTAssertEqual(componentElement0?.attribute(forName: "xOffset")?.stringValue, "100")
    XCTAssertEqual(componentElement0?.attribute(forName: "yOffset")?.stringValue, "200")
  }

}
